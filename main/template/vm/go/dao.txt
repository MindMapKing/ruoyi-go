// ==========================================================================
// LV自动生成model扩展代码列表、增、删，改、查、导出，只生成一次，按需修改,再次生成不会覆盖.
// 生成日期：{{.table.CreateTime}}
// 生成人：{{.table.FunctionAuthor}}
// ==========================================================================
package dao

import (
    "github.com/lostvip-com/lv_framework/db"
    "github.com/lostvip-com/lv_framework/db/lvbatis"
    "github.com/lostvip-com/lv_framework/db/lvdao"
    "github.com/lostvip-com/lv_framework/utils/lv_err"
    "{{.table.ModuleName}}/internal/{{.table.PackageName}}/vo"
    "{{.table.ModuleName}}/internal/{{.table.PackageName}}/model"
)

//新增页面请求参数
type {{.table.ClassName}}Dao struct { }

// 根据条件分页查询数据
func (d {{.table.ClassName}}Dao) ListMapByPage(req *vo.Page{{.table.ClassName}}Req) (*[]map[string]string, int64, error) {
	ibatis := lvbatis.NewInstance("{{.table.PackageName}}/{{.table.TbName}}_mapper.sql") //under the mapper directory
	// 约定用方法名ListByPage对应sql文件中的同名tagName
	limitSQL, err := ibatis.GetLimitSql("List{{.table.ClassName}}", req)
	//查询数据
	rows, err := lvdao.ListMapByNamedSql(limitSQL, req,true)
	lv_err.HasErrAndPanic(err)
	count, err := lvdao.CountByNamedSql(ibatis.GetCountSql(), req)
	lv_err.HasErrAndPanic(err)
	return rows, count, nil
}
// 根据条件分页查询数据
func (d {{.table.ClassName}}Dao) ListByPage(req *vo.Page{{.table.ClassName}}Req) (*[]vo.{{.table.ClassName}}Resp, int64, error) {
	ibatis := lvbatis.NewInstance("{{.table.PackageName}}/{{.table.TbName}}_mapper.sql") //under the mapper directory
	// 对应sql文件中的同名tagName
	limitSQL, err := ibatis.GetLimitSql("List{{.table.ClassName}}", req)
	//查询数据
	rows, err := lvdao.ListByNamedSql[vo.{{.table.ClassName}}Resp](limitSQL, req)
	lv_err.HasErrAndPanic(err)
	count, err := lvdao.CountByNamedSql(ibatis.GetCountSql(), req)
	lv_err.HasErrAndPanic(err)
	return rows, count, nil
}

// ListAll 导出excel使用
func (d {{.table.ClassName}}Dao) ListAll(req *vo.Page{{.table.ClassName}}Req, isCamel bool) (*[]map[string]string, error) {
	ibatis := lvbatis.NewInstance("{{.table.PackageName}}/{{.table.TbName}}_mapper.sql")
	// 约定用方法名ListByPage对应sql文件中的同名tagName
	sql, err := ibatis.GetSql("List{{.table.ClassName}}", req)
	lv_err.HasErrAndPanic(err)

	arr, err := lvdao.ListMapByNamedSql(sql, req, isCamel)
	return arr, err
}

// FindByWhere 根据条件查询
func (d {{.table.ClassName}}Dao) Find(where, order string) (*[]model.{{.table.ClassName}}, error) {
	var list []model.{{.table.ClassName}}
	err := db.GetMasterGorm().Table("{{.table.TbName}}").Where(where).Order(order).Find(&list).Error
	return &list, err
}

func (d {{.table.ClassName}}Dao) DeleteByIds(ida []int64) int64 {
	db := db.GetMasterGorm().Table("{{.table.TbName}}").Where("{{.table.PkColumn.ColumnName}} in ? ", ida).Update("del_flag", 1)
    if db.Error != nil {
        panic(db.Error)
    }
    return db.RowsAffected
}
