// ==========================================================================
// LV自动生成业务逻辑层相关代码，只生成一次，按需修改,再次生成不会覆盖.
// 生成日期：{{.table.CreateTime}}
// 生成人：{{.table.FunctionAuthor}}
// ==========================================================================
package service

import (
	"errors"
    "github.com/gin-gonic/gin"
    "lostvip.com/utils/lv_conv"
    "lostvip.com/utils/lv_web"
    "{{.table.PackageName}}/app/{{.table.ModuleName}}/model"
    "{{.table.PackageName}}/app/{{.table.ModuleName}}/dao"
    "{{.table.PackageName}}/app/{{.table.ModuleName}}/dto"
    "{{.table.PackageName}}/app/system/service"
    "time"
)
type {{.table.ClassName}}Service struct{}
//根据主键查询数据
func (svc {{.table.ClassName}}Service) SelectRecordById(id {{.table.PkColumn.GoType}}) (*model.{{.table.ClassName}}, error) {
	entity := &model.{{.table.ClassName}}{ {{.table.PkColumn.GoField}}: id}
	_, err := entity.FindOne()
	return entity, err
}

//根据主键删除数据
func (svc {{.table.ClassName}}Service) DeleteRecordById(id {{.table.PkColumn.GoType}}) bool {
	rs, err := (&model.{{.table.ClassName}}{ {{.table.PkColumn.GoField}}: id}).Delete()
	if err == nil {
		if rs > 0 {
			return true
		}
	}
	return false
}

//批量删除数据记录
func (svc {{.table.ClassName}}Service) DeleteRecordByIds(ids string) int64 {
	ida := lv_conv.ToInt64Array(ids, ",")
    var dao dao.{{.table.ClassName}}Dao
	result, err := dao.DeleteBatch(ida...)
	if err != nil {
		return 0
	}
	return result
}

//添加数据
func (svc {{.table.ClassName}}Service) AddSave(req *dto.Add{{.table.ClassName}}Req, c *gin.Context) ({{.table.PkColumn.GoType}}, error) {
	var entity = new(model.{{.table.ClassName}})
	{{range $index, $column := .table.Columns}}
	{{if eq $column.IsInsert "1"}} {{if eq $column.IsPk "0"}} entity.{{$column.GoField}} = req.{{$column.GoField}}{{end}} {{end}} {{end}}
	entity.CreateTime = time.Now()
	entity.CreateBy = ""

	var userService service.UserService
	user := userService.GetProfile(c)

	if user != nil {
	    entity.CreateBy = user.LoginName
	}

	_, err := entity.Insert()
	if err != nil {
        panic(err)
    }
	return entity.{{.table.PkColumn.GoField}}, err
}

//修改数据
func (svc {{.table.ClassName}}Service) EditSave(req *dto.Edit{{.table.ClassName}}Req, c *gin.Context) (int64, error) {
	entity := &model.{{.table.ClassName}}{ {{.table.PkColumn.GoField}}: req.{{.table.PkColumn.GoField}} }
	ok, err := entity.FindOne()

	if err != nil {
		return 0, err
	}

	if !ok {
		return 0, errors.New("数据不存在")
	}

	{{range $index, $column := .table.Columns}} {{if eq $column.IsEdit "1"}}
	entity.{{$column.GoField}} = req.{{$column.GoField}}{{end}} {{end}}
	entity.UpdateTime = time.Now()
	entity.UpdateBy = ""

	var userService service.UserService
	user := userService.GetProfile(c)

	if user == nil {
		entity.UpdateBy = user.LoginName
	}

	return entity.Update()
}

//根据条件查询数据
func (svc {{.table.ClassName}}Service) SelectListAll(params *dto.Page{{.table.ClassName}}Req) ([]model.{{.table.ClassName}}, error) {
	var dao dao.{{.table.ClassName}}Dao
	return dao.SelectListAll(params)
}

//根据条件分页查询数据
func (svc {{.table.ClassName}}Service) SelectListByPage(params *dto.Page{{.table.ClassName}}Req) ([]model.{{.table.ClassName}}, *lv_web.Paging, error) {
	var dao dao.{{.table.ClassName}}Dao
	return dao.SelectListByPage(params)
}

// 导出excel
func (svc {{.table.ClassName}}Service) Export(param *dto.Page{{.table.ClassName}}Req) (string, error) {
	head := []string{ {{range $index, $column := .table.Columns}} {{if eq $index 0}}"{{$column.ColumnComment}}"{{else}},"{{$column.ColumnComment}}"{{end}}{{end}}}
	col := []string{ {{range $index, $column := .table.Columns}} {{if eq $index 0}}"{{$column.ColumnName}}"{{else}},"{{$column.ColumnName}}"{{end}}{{end}}}
	var dao dao.{{.table.ClassName}}Dao
	return dao.SelectListExport(param, head, col)
}