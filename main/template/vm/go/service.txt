// ==========================================================================
// LV自动生成业务逻辑层相关代码，只生成一次，按需修改,再次生成不会覆盖.
// 生成日期：{{.table.CreateTime}}
// 生成人：{{.table.FunctionAuthor}}
// ==========================================================================
package service

import (
	"time"
    "lostvip.com/utils/lv_conv"
    "lostvip.com/utils/lv_logic"
    "lostvip.com/utils/lv_office"
    "{{.table.PackageName}}/app/{{.table.ModuleName}}/model"
    "{{.table.PackageName}}/app/{{.table.ModuleName}}/dao"
    "{{.table.PackageName}}/app/{{.table.ModuleName}}/vo"
)
type {{.table.ClassName}}Service struct{}
// FindById 根据主键查询数据
func (svc {{.table.ClassName}}Service) FindById(id {{.table.PkColumn.GoType}}) (*model.{{.table.ClassName}}, error) {
	entity := &model.{{.table.ClassName}}{ {{.table.PkColumn.GoField}}: id}
	err := entity.FindById()
	return entity, err
}

// DeleteById 根据主键删除数据
func (svc {{.table.ClassName}}Service) DeleteById(id {{.table.PkColumn.GoType}}) error {
	err := (&model.{{.table.ClassName}}{ {{.table.PkColumn.GoField}}: id}).Delete()
	return err
}

// DeleteByIds 批量删除数据记录
func (svc {{.table.ClassName}}Service) DeleteByIds(ids string) int64 {
	ida := lv_conv.ToInt64Array(ids, ",")
    var d dao.{{.table.ClassName}}Dao
	rowsAffected := d.DeleteByIds(ida)
	return rowsAffected
}

// AddSave 添加数据
func (svc {{.table.ClassName}}Service) AddSave(req *vo.Add{{.table.ClassName}}Req) ({{.table.PkColumn.GoType}}, error) {
	var entity = new(model.{{.table.ClassName}})
	{{range $index, $column := .table.Columns}}
	{{- if or (eq $column.GoField "DelFlag") -}}
        {{- continue -}}
    {{- end -}}
	    {{if eq $column.IsInsert "1"}} {{if eq $column.IsPk "0"}} entity.{{$column.GoField}} = req.{{$column.GoField}}{{end}} {{end}}
	{{end}}
	entity.CreateTime = time.Now()
	entity.UpdateTime = entity.CreateTime
	entity.CreateBy = req.CreateBy
	err := entity.Save()
	lv_logic.HasErrAndPanic(err)
	return entity.{{.table.PkColumn.GoField}}, err
}

// EditSave 修改数据
func (svc {{.table.ClassName}}Service) EditSave(req *vo.Edit{{.table.ClassName}}Req) error {
	entity := &model.{{.table.ClassName}}{ {{.table.PkColumn.GoField}}: req.{{.table.PkColumn.GoField}} }
	err := entity.FindById()
    lv_logic.HasErrAndPanic(err)
	{{range $index, $column := .table.Columns}} {{if eq $column.IsEdit "1"}}
	entity.{{$column.GoField}} = req.{{$column.GoField}}{{end}} {{end}}
	entity.UpdateTime = time.Now()
	entity.UpdateBy = req.UpdateBy
	return entity.Updates()
}

// ListByPage 根据条件分页查询数据
func (svc {{.table.ClassName}}Service) ListByPage(params *vo.Page{{.table.ClassName}}Req) (*[]model.{{.table.ClassName}},int64, error) {
	var d dao.{{.table.ClassName}}Dao
	return d.ListByPage(params)
}

// ExportAll 导出excel
func (svc {{.table.ClassName}}Service) ExportAll(param *vo.Page{{.table.ClassName}}Req) (string, error) {
    var d dao.{{.table.ClassName}}Dao
    listMap, err := d.ListAll(param)
    lv_logic.HasErrAndPanic(err)
	heads := []string{ {{range $index, $column := .table.Columns}} {{if eq $index 0}}"{{$column.ColumnComment}}"{{else}},"{{$column.ColumnComment}}"{{end}}{{end}}}
	cols := []string{ {{range $index, $column := .table.Columns}} {{if eq $index 0}}"{{$column.ColumnName}}"{{else}},"{{$column.ColumnName}}"{{end}}{{end}}}
	url, err := lv_office.DownlaodExcelByListMap(&heads, &cols, listMap)
	return url, err
}